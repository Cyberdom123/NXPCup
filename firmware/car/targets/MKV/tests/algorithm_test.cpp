#include <algorithm.hpp>
#include <gtest/gtest.h>

TEST(AlgorithmTest, Init) {
  Algorithm algorithm;

  // EXPECT_ANY_THROW(algorithm.proc(nullptr));
}

TEST(AlgorithmTest, Position) {
  Algorithm algorithm;

  uint16_t data[128];

    for (auto i = 0; i < 128; i++) {
        data[i] = 28000;
    }

  data[28] = 0;
  data[29] = 0;
  data[30] = 0;

  data[127 - 35] = 0;
  data[127 - 34] = 0;
  data[127 - 33] = 0;

  int32_t output = algorithm.calculatePosition(data);
  std::cerr << "Output: " << output << std::endl;

  EXPECT_NEAR(output, -5, 0);

  for (auto i = 0; i < 128; i++) {
      data[i] = 28000;
  }

  data[33] = 0;
  data[34] = 0;
  data[35] = 0;

  data[127 - 30] = 0;
  data[127 - 30] = 0;
  data[127 - 30] = 0;

  output = algorithm.calculatePosition(data);
  std::cerr << "Output: " << output << std::endl;

  EXPECT_NEAR(output, 5, 0);
}

// TODO: add const
static uint16_t centered[128] = {1248, 1248, 1326, 1404, 1486, 1556, 1652, 1746, 1866, 1980, 2286, 2702, 3182, 4052, 5210, 6662, 8150, 8896, 9908, 11524, 13456, 15824, 18474, 20538, 22986, 24854, 27286, 28740, 30158, 31070, 31070, 31074, 31068, 31068, 31078, 31068, 31070, 31074, 31068, 31070, 31070, 31072, 31074, 31074, 31070, 31072, 31074, 31080, 31072, 31074, 31076, 31074, 31074, 31078, 31076, 31082, 31076, 31074, 31078, 31082, 31076, 31076, 31066, 31076, 31078, 31080, 31072, 31072, 31076, 31080, 31070, 31084, 31074, 31078, 31076, 31080, 31074, 31074, 31080, 31078, 31080, 31078, 31070, 31074, 31078, 31068, 31076, 31068, 31070, 31064, 31076, 31062, 31070, 30926, 30994, 30608, 29494, 28464, 26546, 24512, 22726, 21032, 18844, 17098, 14924, 13342, 12226, 10906, 10286, 9080, 7480, 6020, 4684, 3620, 3030, 2670, 2280, 2154, 2020, 1926, 1796, 1700, 1646, 1552, 1492, 1434, 1380, 1338};

TEST(AlgorithmTest, Centered) {
  Algorithm algorithm;

  int32_t output = algorithm.calculatePosition(centered);
  std::cerr << "Output: " << output << std::endl;

  EXPECT_NEAR(output, 0, 5);
}

// TODO: add const
static uint16_t left_side[128] = {
    1154, 1154, 1248, 1292, 1378, 1468, 1556, 1638, 1738, 1838, 2066, 2344, 2772, 3692, 4942, 6396,
    7994, 9260, 10584, 12054, 13330, 14542, 15616, 16836, 17846, 18388, 19498, 19756, 20280, 20926,
    21016, 21360, 21394, 21402, 21520, 21968, 21776, 21864, 21544, 21838, 21556, 21494, 21154, 19882,
    18362, 16816, 15628, 15620, 16968, 18188, 19964, 22162, 24356, 27262, 29852, 31084, 31066, 31072,
    31076, 31080, 31080, 31082, 31082, 31084, 31076, 31076, 31084, 31078, 31080, 31086, 31084, 31078,
    31082, 31082, 31074, 31076, 31072, 31072, 31088, 31074, 31076, 31074, 31078, 31074, 31076, 31066,
    31074, 31070, 31074, 31076, 31068, 30732, 30762, 30296, 30432, 30122, 29432, 29610, 28944, 28044,
    27248, 26616, 25026, 23784, 22036, 20144, 18480, 15628, 13768, 11656, 9362, 7330, 5398, 3848,
    3078, 2662, 2300, 2130, 2004, 1898, 1784, 1680, 1618, 1536, 1468, 1420, 1366, 1340
};

TEST(AlgorithmTest, LeftSide) {
  Algorithm algorithm;

  int32_t output = algorithm.calculatePosition(left_side);
  std::cerr << "Output: " << output << std::endl;

  EXPECT_NEAR(output, 28, 3);
}

static uint16_t right_side[128] = {
    1236, 1236, 1328, 1364, 1458, 1534, 1628, 1734, 1828, 1934, 2256, 2734, 3398, 4896, 6822, 9124,
    11588, 13608, 15830, 18416, 20460, 22412, 24140, 25454, 26978, 27738, 29362, 29602, 30228, 31052,
    30960, 31066, 31066, 31064, 31068, 31070, 31066, 31070, 31068, 31072, 31068, 31078, 31074, 31068,
    31072, 31070, 31082, 31076, 31074, 31074, 31070, 31072, 31074, 31078, 31068, 31068, 31074, 31076,
    31078, 31066, 31072, 31078, 31066, 31072, 31076, 31078, 31070, 31074, 31072, 31076, 30960, 29312,
    26940, 24156, 21730, 19882, 18002, 16722, 15814, 15138, 15946, 17216, 19076, 19930, 20804, 20828,
    20962, 20876, 20870, 20756, 20488, 20126, 19952, 19492, 19356, 18966, 18398, 18356, 17836, 17224,
    16698, 16004, 14982, 14330, 13354, 12322, 11380, 9974, 8886, 7666, 6312, 5102, 3942, 3030, 2562,
    2316, 2050, 1970, 1862, 1756, 1682, 1572, 1486, 1416, 1358, 1296, 1266, 1238
};


TEST(AlgorithmTest, RightSide) {
  Algorithm algorithm;

  int32_t output = algorithm.calculatePosition(right_side);
  std::cerr << "Output: " << output << std::endl;

  EXPECT_NEAR(output, -32, 3);
}

static uint16_t right_side_far[128] = {
    1246, 1246, 1330, 1408, 1472, 1562, 1650, 1744, 1866, 1992, 2274, 2768, 3362, 4714, 6612, 8948,
    11488, 13562, 15828, 18458, 20548, 22514, 24268, 25604, 27150, 27952, 29602, 29844, 30486, 31072,
    31070, 31070, 31070, 31068, 31068, 31074, 31072, 31066, 31066, 31066, 31068, 31064, 31068, 31070,
    31070, 31068, 31072, 31066, 31070, 31066, 31076, 31080, 31082, 31074, 31070, 31082, 31078, 31068,
    31078, 31068, 31076, 31070, 31076, 31070, 31070, 31076, 31068, 31078, 31070, 31078, 31076, 31078,
    31074, 31070, 31068, 31078, 31078, 31070, 31080, 31048, 30890, 28722, 26972, 24068, 22434, 20624,
    19548, 18386, 17538, 17096, 17044, 17752, 19036, 19814, 20474, 20376, 19842, 19860, 19322, 18540,
    17834, 17284, 15978, 15000, 13900, 12824, 11832, 10384, 9352, 8128, 6742, 5492, 4284, 3282, 2754,
    2450, 2162, 2036, 1932, 1826, 1714, 1634, 1554, 1472, 1418, 1356, 1306, 1284
};

TEST(AlgorithmTest, RightSideFar) {
  Algorithm algorithm;

  int32_t output = algorithm.calculatePosition(right_side_far);
  std::cerr << "Output: " << output << std::endl;

  EXPECT_NEAR(output, -22, 3);
}